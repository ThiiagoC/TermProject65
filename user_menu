//
//  main.cpp
//  FINAL PROJECT STARTING POINT WILL
//
//  Created by William Burger on 2/16/16.
//  Copyright (c) 2016 William Burger. All rights reserved.
//
// Compiler also using [-std=c++11]

#include <iostream>
#include <fstream>
#include <string.h>
#include <string>
#include <sstream>
#include <algorithm>
#include <stdlib.h>
#include <time.h>

#define STYLE_LENGTH 20
#define MENU_SIZE 30
#define NUM_RESTAURANTS 10
#define NUM_RESULTS 20
#define NUM_INGREDIENTS 30
using namespace std;



//This is the base class for an item on the menu. It will bequeath thsese items to side dish, main dish, and drink classes through inheritance. The menus will be a linked list: the elements link to a previous and next item. Functions consist of setting member elements, printing member elements, and returning member elements or pointers to copies of those elements.
//Indexing in database for accessing menu item: Restaurant Index|00|Menu item type index|Menu item array index|menu item member function index
class menu_item{
protected:
    string* ingredients;
    char* name;
    char style[STYLE_LENGTH];
    float price;
    int for_how_many;
    int calories;
    int num_ingredients;
    char* restaurant;
public:
    void set_restaurant(char* restauran){
        restaurant = new char[strlen (restauran)];
        strcpy(restaurant,restauran);
    }
    char* get_restaurant(){
        char* copy;
        strcpy(copy,restaurant);
        return copy;
    }
    void print_restaurant(){
        int i = 0;
        while (i<strlen(restaurant)){
            cout << restaurant[i];
            i++;
        }
    }
    menu_item();
    ~menu_item();
    string* get_ingredients_pointer(){
        string* ingred = ingredients;
        return ingred;
    }
    void set_ingredients();
    void set_ingredients(string*,int);
    void print_ingredients();
    char* get_name(){
        char* nam;
        nam = new char[strlen(name)+1];
        strcpy(nam,name);
        return nam;
    }
    void set_name();
    void set_name(string);
    void set_name(char*);
    void print_name();
    void set_style();
    void set_style(char*);
    void set_style(string);
    void print_style();
    string get_style(){
        return style;
    };
    void set_price(){
        cout<< "Enter a price >>";
        cin >> price;
    }
    void set_price (float pric){
        price=pric;
    }
    void print_price(){
        cout << "Price: $"<<price<<"\n";
    }
    float get_price(){
        return price;
    }
    void set_for_how_many(int hmany){
        for_how_many = hmany;
    }
    void set_for_how_many(){
        cout << "Enter how many people the dish is for >>";
        cin >> for_how_many;
    }
    void print_for_how_many(){
        cout << "Portion size for ";
        cout << for_how_many;
        cout << " person\n";
    }
    int get_for_how_many(){
        return for_how_many;
    }
    void set_calories(int cal){
        calories = cal;
    }
    void set_calories(){
        cout << "Enter how many calories the dish is >>";
        cin >> calories;
    }
    void print_calories(){
        cout <<"Total Calories: ";
        cout << calories;
        cout << "\n";
    }
    int get_calories(){
        return calories;
    }
    void print_menu_item();
    int get_num_ingredients(){
        return num_ingredients;
    }
};

//Function definitions that were not defined in line.
string print_style_options(){
    string sty;
    cout << "chinese\n" << "diner\n" << "mexican\n" << "thai\n" << "american comfort\n" << "other\n";
    cout << "Please type the style of the restaurant from the list >>";
    getline(cin,sty);
    while(sty.compare("chinese")!=0 and sty.compare("diner")!=0 and sty.compare("thai")!=0 and sty.compare("american comfort")!=0 and sty.compare("other")!=0){
        cout <<"INVALID ENTRY PLEASE TRY AGAIN\n";
        cout <<"chinese\n" << "diner\n" << "mexican\n" << "thai\n" << "american comfort\n" << "other\n";
        cout << "Please type the style of the restaurant from the list >>";
        getline(cin,sty);
    }
    return sty;
}
void menu_item::set_ingredients(){
    int num,i=0;
    string junk;
    cout << "How many ingredients >>";
    cin >> num;
    ingredients = new string[num];
    std::getline(cin,junk);
    while (i<num){
        cout << "Enter an ingredient >>";
        std::getline(cin,ingredients[i]);
        i++;
    }
    cout << "Ingredients update complete for side_dish ";
    i=0;
    while (i<strlen(name)){
        cout<<name[i];
        i++;
    }
    cout <<"\n";
    num_ingredients = num;
};

//The set_ingredients function without user input. It takes the pointer to the first element in the array of strings and also the number of ingredients in the array.
void menu_item::set_ingredients(string* first_pointer,int num){
    int i = 0;
    num_ingredients = num;
    ingredients = new string[num];
    while(i<num){
        ingredients[i]=first_pointer[i];
        i++;
    }
}
void menu_item::print_ingredients(){
    int i=0;
    cout << "Ingredients: \n";
    while (i<num_ingredients){
        cout << i+1 << ". " << ingredients[i] << "\n";
        i++;
    }
}
menu_item::menu_item(){
    ingredients = new string[1];
    ingredients[0] = "Unavailable";
    name = new char[7];
    strcpy(name,"holder");
    strcpy(style,"holder");
    price = 0.00;
    for_how_many = 0;
    calories = 0;
}

//Menu_item destructor will not need to delete name since it will be deleted in each child class
menu_item::~menu_item(){
}
void menu_item::set_name(){
    int i=0;
    string nam;
    cout << "Enter the side dish name >> ";
    getline(cin,nam);
    name = new char[nam.size()+1];
    while (i<nam.size()+1){
        if(i<nam.size()){
            name[i] = nam[i];
        }
        else
            name[i]=' ';
        i++;
    }
}
//set_name and set_style functions can take either a pointer to the first character or the entire string
void menu_item::set_name(char* first){
    name = new char[strlen(first)+1];
    strcpy(name,first);
}
void menu_item::set_name(string nam){
    int i =0;
    name = new char[nam.size()];
    while (i<nam.size()){
        if(i<nam.size()){
            name[i] = nam[i];
        }
        else
            name[i]=' ';
        i++;
    }
}
void menu_item::print_name(){
    int i = 0;
    cout << "Name: ";
    while(i<strlen(name)){
        cout << name[i];
        i++;
    }
    cout << "\n";
}


void menu_item::set_style(char* first){
    strcpy(style,first);
}
void menu_item::set_style(string sty){
    int i =0;
    while (i<strlen(style)+1){
        if(i<sty.size()){
            style[i] = sty[i];
        }
        else
            style[i]='\0';
        i++;
    }
}
void menu_item::set_style(){
    int i = 0;
    string sty;
    cout << "Select the style from the list below:\n";
    sty = print_style_options();
    while (i<sty.size()){
        if (i<sty.size()){
            style[i] = sty[i];
        }
        else
            style[i] = ' ';
        i++;
    }
}
void menu_item::print_style(){
    cout << "Style: ";
    int i = 0;
    while(i<strlen(style)){
        cout << style[i];
        i++;
    }
    cout << "\n";
}

void menu_item::print_menu_item(){
    print_name();
    print_ingredients();
    print_price();
    print_style();
    print_for_how_many();
    print_calories();
}

class side_dish:public menu_item{
private:
    char type = 's';
public:
    side_dish();
    ~side_dish();
    char get_type(){
        return type;
    }
    void operator =(menu_item item){
        string str;
        ingredients =item.get_ingredients_pointer();
        name = item.get_name();
        price = item.get_price();
        calories = item.get_calories();
        for_how_many = item.get_for_how_many();
        num_ingredients = item.get_num_ingredients();
        str = item.get_style();
        for(int i =0;i<STYLE_LENGTH;i++){
            style[i] = str[i];
        }
    }
};

side_dish::side_dish(){
    ingredients = new string[1];
    ingredients[0] = "Unavailable";
    name = new char[7];
    strcpy(name,"holder");
    strcpy(style,"holder");
    price = 0.00;
    for_how_many = 0;
    calories = 0;
}
side_dish::~side_dish(){
}

class drink:public menu_item{
private:
    bool hot;
    bool alcoholic;
    char type = 'd';
public:
    char get_type(){
        return type;
    }
    bool get_temperature(){
        return hot;
    }
    void set_temperature(bool temp){
        hot = temp;
    }
    bool is_alcoholic(){
        return alcoholic;
    }
    void set_alcohol(bool alc){
        alcoholic = alc;
    }
    drink();
    ~drink();
    void print_drink(){
        print_menu_item();
        if(hot==true){
            cout << "Hot beverage: Yes\n";
        } else {
            cout << "Hot beverage: No\n";
        }
        if(alcoholic==true){
            cout << "Alcoholic beverage: Yes\n";
        } else {
            cout << "Alcoholic beverage: No\n";
        }
    }
    void operator =(menu_item item){
        string str;
        ingredients =item.get_ingredients_pointer();
        name = item.get_name();
        price = item.get_price();
        calories = item.get_calories();
        for_how_many = item.get_for_how_many();
        num_ingredients = item.get_num_ingredients();
        str = item.get_style();
        for(int i =0;i<STYLE_LENGTH;i++){
            style[i] = str[i];
        }
    }
};
drink::drink(){
    ingredients = new string[1];
    ingredients[0] = "Unavailable";
    name = new char[7];
    strcpy(name,"holder");
    strcpy(style,"holder");
    price = 0.00;
    for_how_many =0;
    calories = 0;
    hot = false;
    alcoholic = false;
}
drink::~drink(){
}

class main_dish:public menu_item{
private:
    side_dish sidedish_pairing;
    drink drink_pairing;
    char type = 'm';
public:
    char get_type(){
        return type;
    }
    main_dish();
    ~main_dish();
    void set_side(side_dish sd){
        sidedish_pairing = sd;
    }
    side_dish get_side(){
        return sidedish_pairing;
    }
    void set_drink(drink d){
        drink_pairing = d;
    }
    drink get_drink(){
        return drink_pairing;
    }
    void operator =(menu_item item){
        string str;
        ingredients =item.get_ingredients_pointer();
        name = item.get_name();
        price = item.get_price();
        calories = item.get_calories();
        for_how_many = item.get_for_how_many();
        num_ingredients = item.get_num_ingredients();
        str = item.get_style();
        for(int i =0;i<STYLE_LENGTH;i++){
            style[i] = str[i];
        }
    }
};

main_dish::main_dish(){
    ingredients = new string[1];
    ingredients[0] = "Unavailable";
    name = new char[7];
    strcpy(name,"holder");
    strcpy(style,"holder");
    price = 0.00;
    for_how_many = 0;
    calories = 0;
}
main_dish :: ~main_dish(){
}

class menu{
private:
    friend class restaurant;
    main_dish main_dishes[MENU_SIZE]; //00|00-99 are indexes of
    side_dish side_dishes[MENU_SIZE];
    drink drinks[MENU_SIZE];
    int num_dishes;
    int num_side_dishes;
    int num_drinks;
public:
    menu();
    menu(main_dish md[],int num1,side_dish sd[],int num2,drink d[], int num3){
        num_dishes = num1;
        num_side_dishes = num2;
        num_drinks = num3;
        int i=0,j=0,z=0;
        while (i<num1){
            main_dishes[i] = md[i];
            i++;
        }
        while (j<num2){
            side_dishes[j] = sd[j];
            j++;
        }
        while(z<num3){
            drinks[z]=d[z];
            z++;
        }
    }

    main_dish* get_mains(){
        return main_dishes;
    }

    side_dish* get_sides(){
        return side_dishes;
    }
    drink* get_drinks(){
        return drinks;
    }
    int get_num_dishes(){
        return num_dishes;
    }

    int get_num_side_dishes(){
        return num_side_dishes;
    }

    int get_num_drinks(){
        return num_drinks;
    }
    void print_menu(){
        int i=0,j=0,z=0;
        cout << "-------------------------\n";
        while (i<num_dishes){
            main_dishes[i].print_menu_item();
            cout << "-------------------------\n";
            i++;
        }
        while (j<num_side_dishes){
            side_dishes[j].print_menu_item();
            cout << "-------------------------\n";
            j++;
        }
        while(z<num_drinks){
            drinks[z].print_drink();
            cout << "-------------------------\n";
            z++;
        }
    }
    void print_main_dishes(){
        int i=0;
        cout << "-------------------------\n";
        while (i<num_dishes){
            main_dishes[i].print_menu_item();
            cout << "-------------------------\n";
            i++;
        }
    }
    void print_main_dish(int i){
        cout << "-------------------------\n";
        main_dishes[i].print_menu_item();
        cout << "-------------------------\n";
    }
    void print_side_dishes(){
        int j=0;
        cout << "-------------------------\n";
        while (j<num_side_dishes){
            side_dishes[j].print_menu_item();
            cout << "-------------------------\n";
            j++;
        }
    }
    void print_side_dish(int i){
        cout << "-------------------------\n";
        side_dishes[i].print_menu_item();
        cout << "-------------------------\n";
    }
    void print_drinks(){
        int z=0;
        cout << "-------------------------\n";
        while(z<num_drinks){
            drinks[z].print_drink();
            cout << "-------------------------\n";
            z++;
        }
    }
    void print_drink(int i){
        cout << "-------------------------\n";
        drinks[i].print_drink();
        cout << "-------------------------\n";
    }

    ~menu(){};
};
menu::menu(){
    num_dishes = 0;
    num_side_dishes=0;
    num_drinks=0;
}


class restaurant{
private:
    class menu menu; //00
    char style[STYLE_LENGTH]; //01
    char* name;
public:
    restaurant();
    ~restaurant();
    void set_menu(main_dish* md,int num1,side_dish* sd,int num2,drink* d, int num3){
        class menu men(md,num1,sd,num2,d,num3);
        menu =men;
    }
    main_dish* get_mains(){
        return (menu.get_mains());
    }

    side_dish* get_sides(){
        return (menu.get_sides());
    }

    drink* get_drinks(){
        return (menu.get_drinks());
    }
    string get_main_dish_name(int i){
        return menu.main_dishes[i].get_name();
    }
    string get_side_dish_name(int i){
        return menu.side_dishes[i].get_name();
    }
    string get_drink_name(int i){
        return menu.drinks[i].get_name();
    }
    float get_main_dish_price(int i){
        return menu.main_dishes[i].get_price();
    }
    float get_side_dish_price(int i){
        return menu.side_dishes[i].get_price();
    }
    float get_drink_price(int i){
        return menu.drinks[i].get_price();
    }
    string get_main_dish_style(int i){
        return menu.main_dishes[i].get_style();
    }
    string get_side_dish_style(int i){
        return menu.side_dishes[i].get_style();
    }
    string get_drink_style(int i){
        return menu.drinks[i].get_style();
    }
    int get_main_dish_calories(int i){
        return menu.main_dishes[i].get_calories();
    }
    int get_side_dish_calories(int i){
        return menu.side_dishes[i].get_calories();
    }
    int get_drink_calories(int i){
        return menu.drinks[i].get_calories();
    }
    string* get_main_dish_ingredients(int i){
        return menu.main_dishes[i].get_ingredients_pointer();
    }
    string* get_side_dish_ingredients(int i){
        return menu.side_dishes[i].get_ingredients_pointer();
    }
    string* get_drink_ingredients(int i){
        return menu.drinks[i].get_ingredients_pointer();
    }
    int get_main_dish_num_ingredients(int i){
        return menu.main_dishes[i].get_num_ingredients();
    }
    int get_side_dish_num_ingredients(int i){
        return menu.side_dishes[i].get_num_ingredients();
    }
    int get_drink_num_ingredients(int i){
        return menu.drinks[i].get_num_ingredients();
    }
    int get_num_dishes(){
        return (menu.get_num_dishes());
    }
    int get_num_side_dishes(){
        return (menu.get_num_side_dishes());
    }
    int get_num_drinks(){
        return (menu.get_num_drinks());
    }
    void print_name(){
        int i=0;
        while(i<strlen(name)){
            cout << name[i];
            i++;
        }
    }
    void print_menu(){
        menu.print_menu();
    }
    void print_main_dishes(){
        menu.print_main_dishes();
    }
    void print_main_dish(int i){
        menu.print_main_dish(i);
    }
    void print_side_dishes(){
        menu.print_side_dishes();
    }
    void print_side_dish(int i){
        menu.print_side_dish(i);
    }
    void print_drinks(){
        menu.print_drinks();
    }
    void print_drink(int i){
        menu.print_drink(i);
    }
    void set_name(string nam){
        int i=0;
        name = new char[nam.length()+1];
        while(i<nam.length()){
            name[i]=nam[i];
            i++;
        }
    }
    char* get_name(){
        return name;
    }
};
restaurant::restaurant(){
    strcpy(style,"holder");
    name = new char[7];
    strcpy(name,"holder");
}
restaurant::~restaurant(){
    delete name;
}

class sorted_names{
    string name;
    int rest_id;
    int old_id;
public:
    string get_name(){
        return name;
    }
    int get_rest_id(){
        return rest_id;
    }
    int get_old_id(){
        return old_id;
    }
    void set_name(string str){
        name = str;
    }
    void set_rest_id(int id){
        rest_id = id;
    }
    void set_old_id(int id){
        old_id = id;
    }
};

class sorted_prices{
    float price;
    int rest_id;
    int old_id;
public:
    float get_price(){
        return price;
    }
    int get_rest_id(){
        return rest_id;
    }
    int get_old_id(){
        return old_id;
    }
    void set_price(float num){
        price = num;
    }
     void set_rest_id(int id){
        rest_id = id;
    }
     void set_old_id(int id){
        old_id = id;
    }

};

class ingredient{
    string name;
    int restaurant_ID[MENU_SIZE];
    int menu_ID[MENU_SIZE];
    char type;
    int number;
public:
    string get_name(){
        return name;
    }
    int get_rest_id(int i){
        return restaurant_ID[i];
    }
    int get_menu_id(int i){
        return menu_ID[i];
    }
    char get_type(){
        return type;
    }
    int get_number(){
        return number;
    }
    void set_name(string str){
        name = str;
    }
    void set_type(char typ){
        type = typ;
    }
    void set_ingredient(int rest,int menu,int pos){
        restaurant_ID[pos] = rest;
        menu_ID[pos] = menu;
        number++;
    }
    ingredient(){
        number = 0;
    }
};

//Sorting Functions

void sort_main_dishes_price(main_dish* main_dish_menu){
    int price_1;
    int price_2;
    int i;
    bool done = false;
    while(done ==false){

    }
}

int get_option(string &opt){
    bool invalid;
    int i,number;


    cout << "Type the desired option and press enter: ";
    std::getline(std::cin,opt,'\n');

    i = number = 0;
    while(opt[i]!='\0'){
        if(isdigit(opt[i])){
            number += opt[i]-'0';
            i++;
        } else {
            invalid = 1;
        }
    }
    while(invalid){
        cout << "Please, type a valid option: ";
        std::getline(std::cin,opt,'\n');
        i = 0;
        invalid = 0;
        number = 0;
        while(opt[i]!='\0'){
            if(isdigit(opt[i])){
                number += opt[i]-'0';
                i++;
            } else {
                invalid = 1;
            }
        }
    }
    cout << "\n";
    return number;
}


void floatbinarySearch_price(sorted_prices sorted[],int total_number,float number,int results1[],int results2[],int &resultsFound){
    int first = 0;
    int last = total_number - 1;
    int mid;
    int position = -1;    // When not found position is -1
    bool found = false;
    int i;
    float pricemid;

    while (!found && first <= last){
        mid = (first + last) / 2;
        pricemid = sorted[mid].get_price();
        if (pricemid == number){
            found = true;
            position = mid;
        } else if (pricemid > number){  // If value is in lower half
            last = mid - 1;
        } else {
            first = mid + 1;           // If value is in upper half
        }
    }
    if(position == -1){
        results1[resultsFound] = -1;
        results2[resultsFound] = -1;
    } else {
        results1[resultsFound]=sorted[position].get_rest_id();
        results2[resultsFound]=sorted[position].get_old_id();
        resultsFound++;
        int left = 1;
        int right = 1;
        if(position!=0){
            while(sorted[position].get_price()==sorted[position-left].get_price()){
                if(position == 1){
                    results1[resultsFound]=sorted[position-left].get_rest_id();
                    results2[resultsFound]=sorted[position-left].get_old_id();
                    resultsFound++;
                    break;
                }
                results1[resultsFound]=sorted[position-left].get_rest_id();
                results2[resultsFound]=sorted[position-left].get_old_id();
                resultsFound++;
                left++;
            }
        }
        if(position!=total_number-1){
            while(sorted[position].get_price()==sorted[position+right].get_price()){
                if(position == total_number-2){
                    results1[resultsFound]=sorted[position+right].get_rest_id();
                    results2[resultsFound]=sorted[position+right].get_old_id();
                    resultsFound++;
                    break;
                }
                results1[resultsFound]=sorted[position+right].get_rest_id();
                results2[resultsFound]=sorted[position+right].get_old_id();
                resultsFound++;
                right++;
            }
        }
    }
}


void get_sorted_name(sorted_names main[], sorted_names side[], sorted_names drink[],string filename){
    ifstream rfile;
    string str;

    rfile.open(filename.c_str());
    while(getline(rfile,str)){
        int newID,restID,oldID;
        char type;
        string name;

        istringstream iss(str);
        iss >> newID >> type >> restID >> oldID >> name;
        std::replace(name.begin(),name.end(),'_',' ');
        if(type == 'm'){
            main[newID].set_name(name);
            main[newID].set_rest_id(restID);
            main[newID].set_old_id(oldID);
        } else if(type == 's'){
            side[newID].set_name(name);
            side[newID].set_rest_id(restID);
            side[newID].set_old_id(oldID);
        } else if(type == 'd'){
            drink[newID].set_name(name);
            drink[newID].set_rest_id(restID);
            drink[newID].set_old_id(oldID);
        }
    }
    rfile.close();
}

void get_sorted_price(sorted_prices main[], sorted_prices side[], sorted_prices drink[],string filename){
    ifstream rfile;
    string str;

    rfile.open(filename.c_str());
    while(getline(rfile,str)){
        int newID,restID,oldID;
        char type;
        float price;

        istringstream iss(str);
        iss >> newID >> type >> restID >> oldID >> price;
        if(type == 'm'){
            main[newID].set_price(price);
            main[newID].set_rest_id(restID);
            main[newID].set_old_id(oldID);
        } else if(type == 's'){
            side[newID].set_price(price);
            side[newID].set_rest_id(restID);
            side[newID].set_old_id(oldID);
        } else if(type == 'd'){
            drink[newID].set_price(price);
            drink[newID].set_rest_id(restID);
            drink[newID].set_old_id(oldID);
        }
    }
    rfile.close();
}

void get_sorted_ingredient(ingredient sorted[],int &total_number,string filename){
    ifstream rfile;
    string str;
    int prevID = -1;

    rfile.open(filename.c_str());
    while(getline(rfile,str)){
        int newID,restID,oldID,num;
        char type;
        string name;

        istringstream iss(str);
        iss >> newID >> type >> restID >> oldID >> name;
        std::replace(name.begin(),name.end(),'_',' ');

        if(newID != prevID){
            sorted[newID].set_name(name);
            sorted[newID].set_type(type);
            total_number++;
        }
        num = sorted[newID].get_number();
        sorted[newID].set_ingredient(restID,oldID,num);

        prevID = newID;

    }
    rfile.close();
}

void strbinarySearch_name(sorted_names sorted[],int total_number,string name,int results1[],int results2[],int &resultsFound){
    int first = 0;
    int last = total_number - 1;
    int mid;
    int position = -1;    // When not found position is -1
    bool found = false;
    int i;
    string namemid;

    while (!found && first <= last){
        mid = (first + last) / 2;
        namemid = sorted[mid].get_name();
        if (namemid == name){
            found = true;
            position = mid;
        } else if (namemid > name){  // If value is in lower half
            last = mid - 1;
        } else {
            first = mid + 1;           // If value is in upper half
        }
    }

    if(position == -1){
        results1[resultsFound] = -1;
        results2[resultsFound] = -1;
        resultsFound++;
    } else {
        results1[resultsFound]=sorted[position].get_rest_id();
        results2[resultsFound]=sorted[position].get_old_id();
        resultsFound++;
        int left = 1;
        int right = 1;
        if(position!=0){
            while(sorted[position].get_name()==sorted[position-left].get_name()){
                if(position - left == 0){
                    results1[resultsFound]=sorted[position-left].get_rest_id();
                    results2[resultsFound]=sorted[position-left].get_old_id();
                    resultsFound++;
                    break;
                }
                results1[resultsFound]=sorted[position-left].get_rest_id();
                results2[resultsFound]=sorted[position-left].get_old_id();
                resultsFound++;
                left++;
            }
        }
        if(position!=total_number-1){
            while(sorted[position].get_name()==sorted[position+right].get_name()){
                if(position + right == total_number - 1){
                    results1[resultsFound]=sorted[position+right].get_rest_id();
                    results2[resultsFound]=sorted[position+right].get_old_id();
                    resultsFound++;
                    break;
                }
                results1[resultsFound]=sorted[position+right].get_rest_id();
                results2[resultsFound]=sorted[position+right].get_old_id();
                resultsFound++;
                right++;
            }
        }
    }
}

void strbinarySearch_ingredient(ingredient sorted[],int total_number,string name,int results1[],int results2[],char results3[],int &resultsFound){
    int first = 0;
    int last = total_number - 1;
    int mid;
    int position = -1;    // When not found position is -1
    bool found = false;
    string namemid;
    int i,num;

    while (!found && first <= last){
        mid = (first + last) / 2;
        cout << "MID " << mid << endl;
        namemid = sorted[mid].get_name();
        if (namemid == name){
            found = true;
            position = mid;
        } else if (namemid > name){  // If value is in lower half
            last = mid - 1;
        } else {
            first = mid + 1;           // If value is in upper half
        }
    }

    if(position == -1){
        results1[resultsFound] = -1;
        results2[resultsFound] = -1;
        resultsFound++;
    } else {
        if(sorted[position].get_number()>0){
            num = sorted[position].get_number();

            for (i=0;i<num;i++){
                results1[resultsFound]=sorted[position].get_rest_id(i);
                results2[resultsFound]=sorted[position].get_menu_id(i);
                results3[resultsFound]=sorted[position].get_type();
                resultsFound++;
            }
        }
        int left = 1;
        int right = 1;
        if(position!=0){
            while(sorted[position].get_name()==sorted[position-left].get_name()){
                if(position - left == 0){
                    num = sorted[position-left].get_number();

                    for (i=0;i<num;i++){
                        results1[resultsFound]=sorted[position-left].get_rest_id(i);
                        results2[resultsFound]=sorted[position-left].get_menu_id(i);
                        results3[resultsFound]=sorted[position-left].get_type();
                        resultsFound++;
                    }
                    break;
                }
                num = sorted[position-left].get_number();

                for (i=0;i<num;i++){
                    results1[resultsFound]=sorted[position-left].get_rest_id(i);
                    results2[resultsFound]=sorted[position-left].get_menu_id(i);
                    results3[resultsFound]=sorted[position-left].get_type();
                    resultsFound++;
                }
                left++;

            }
        }
        if(position!=total_number-1){
            while(sorted[position].get_name()==sorted[position+right].get_name()){
                if(position + right == total_number - 1){
                    num = sorted[position+right].get_number();

                    for (i=0;i<num;i++){
                        results1[resultsFound]=sorted[position+right].get_rest_id(i);
                        results2[resultsFound]=sorted[position+right].get_menu_id(i);
                        results3[resultsFound]=sorted[position+right].get_type();
                        resultsFound++;
                    }
                    break;
                }
                num = sorted[position+right].get_number();

                for (i=0;i<num;i++){
                    results1[resultsFound]=sorted[position+right].get_rest_id(i);
                    results2[resultsFound]=sorted[position+right].get_menu_id(i);
                    results3[resultsFound]=sorted[position+right].get_type();
                    resultsFound++;
                }
                right++;
            }
        }
    }
}

void linearSearch_string(int option,string input,int results1[],int results2[],char results3[],int &resultsFound,restaurant rests[]){
    int new_results1[NUM_RESULTS];
    int new_results2[NUM_RESULTS];
    char new_results3[NUM_RESULTS];
    int new_resultsFound;
    int i,j;
    int num_ingred;

    new_results1[0] = -1;
    new_results2[0] = -1;
    new_resultsFound = 0;

    if(resultsFound!=0){
    if(option == 1){ // Name
        for(i=0;i<resultsFound;i++){
            if(results3[i]=='m'){
                if(rests[results1[i]].get_main_dish_name(results2[i])==input){
                    new_results1[new_resultsFound] = results1[i];
                    new_results2[new_resultsFound] = results2[i];
                    new_results3[new_resultsFound] = 'm';
                    new_resultsFound++;
                }
            } else {
                if(results3[i]=='s'){
                    if(rests[results1[i]].get_side_dish_name(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 's';
                        new_resultsFound++;
                    }
                } else if(results3[i]=='d'){
                    if(rests[results1[i]].get_drink_name(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 'd';
                        new_resultsFound++;
                    }

                }
            }
        }
    } else if (option == 2){ // Style
        for(i=0;i<resultsFound;i++){
            if(results3[i]=='m'){
                if(rests[results1[i]].get_main_dish_style(results2[i])==input){
                    new_results1[new_resultsFound] = results1[i];
                    new_results2[new_resultsFound] = results2[i];
                    new_results3[new_resultsFound] = 'm';
                    new_resultsFound++;
                }
            } else {
                if(results3[i]=='s'){
                    if(rests[results1[i]].get_side_dish_style(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 's';
                        new_resultsFound++;
                    }
                } else if(results3[i]=='d'){
                    if(rests[results1[i]].get_drink_style(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 'd';
                        new_resultsFound++;
                    }

                }
            }
        }
    } else if (option == 3){ // Ingredients
        for(i=0;i<resultsFound;i++){
            if(results3[i]=='m'){
                num_ingred = rests[results1[i]].get_main_dish_num_ingredients(results2[i]);
                string* ingreds;
                ingreds = rests[results1[i]].get_main_dish_ingredients(results2[i]);
                for(j=0;j<num_ingred;j++){
                    if(ingreds[j]==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 'm';
                        new_resultsFound++;
                    }
                }
            } else {
                if(results3[i]=='s'){
                    num_ingred = rests[results1[i]].get_side_dish_num_ingredients(results2[i]);
                    string* ingreds;
                    ingreds = rests[results1[i]].get_side_dish_ingredients(results2[i]);
                    for(j=0;j<num_ingred;j++){
                        if(ingreds[j]==input){
                            new_results1[new_resultsFound] = results1[i];
                            new_results2[new_resultsFound] = results2[i];
                            new_results3[new_resultsFound] = 's';
                            new_resultsFound++;
                        }
                    }
                } else if(results3[i]=='d'){
                    num_ingred = rests[results1[i]].get_drink_num_ingredients(results2[i]);
                    string* ingreds;
                    ingreds = rests[results1[i]].get_drink_ingredients(results2[i]);
                    for(j=0;j<num_ingred;j++){
                        if(ingreds[j]==input){
                            new_results1[new_resultsFound] = results1[i];
                            new_results2[new_resultsFound] = results2[i];
                            new_results3[new_resultsFound] = 'd';
                            new_resultsFound++;
                        }
                    }

                }
            }
        }
    }
    }

    if(new_resultsFound!=0){
        for(i=1;i<new_resultsFound;i++){
            results1[i]=new_results1[i];
            results2[i]=new_results2[i];
            results3[i]=new_results3[i];
        }
    }
    results1[0]=new_results1[0];
    results2[0]=new_results2[0];
    resultsFound = new_resultsFound;
}

void linearSearch_float(float input,int results1[],int results2[],char results3[],int &resultsFound,restaurant rests[]){
    int new_results1[NUM_RESULTS];
    int new_results2[NUM_RESULTS];
    char new_results3[NUM_RESULTS];
    int new_resultsFound;
    int i;

    new_results1[0] = -1;
    new_results2[0] = -1;
    new_resultsFound = 0;

    if(resultsFound!=0){
        for(i=0;i<resultsFound;i++){
            if(results3[i]=='m'){
                if(rests[results1[i]].get_main_dish_price(results2[i])==input){
                    new_results1[new_resultsFound] = results1[i];
                    new_results2[new_resultsFound] = results2[i];
                    new_results3[new_resultsFound] = 'm';
                    new_resultsFound++;
                }
            } else {
                if(results3[i]=='s'){
                    if(rests[results1[i]].get_side_dish_price(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 's';
                        new_resultsFound++;
                    }
                } else if(results3[i]=='d'){
                    if(rests[results1[i]].get_drink_price(results2[i])==input){
                        new_results1[new_resultsFound] = results1[i];
                        new_results2[new_resultsFound] = results2[i];
                        new_results3[new_resultsFound] = 'd';
                        new_resultsFound++;
                    }
                }
            }
        }
    }

    if(new_resultsFound!=0){
        for(i=1;i<new_resultsFound;i++){
            results1[i]=new_results1[i];
            results2[i]=new_results2[i];
            results3[i]=new_results3[i];
        }
    }
    results1[0]=new_results1[0];
    results2[0]=new_results2[0];
    resultsFound = new_resultsFound;
}

void linearSearch_int(int input,int results1[],int results2[],char results3[],int &resultsFound,restaurant rests[]){
    int new_results1[NUM_RESULTS];
    int new_results2[NUM_RESULTS];
    char new_results3[NUM_RESULTS];
    int new_resultsFound;
    int i;

    new_results1[0] = -1;
    new_results2[0] = -1;
    new_resultsFound = 0;

    if(resultsFound!=0){
    for(i=0;i<resultsFound;i++){
        if(results3[i]=='m'){
            if(rests[results1[i]].get_main_dish_calories(results2[i])==input){
                new_results1[new_resultsFound] = results1[i];
                new_results2[new_resultsFound] = results2[i];
                new_results3[new_resultsFound] = 'm';
                new_resultsFound++;
            }
        } else {
            if(results3[i]=='s'){
                if(rests[results1[i]].get_side_dish_calories(results2[i])==input){
                    new_results1[new_resultsFound] = results1[i];
                    new_results2[new_resultsFound] = results2[i];
                    new_results3[new_resultsFound] = 's';
                    new_resultsFound++;
                }
            } else if(results3[i]=='d'){
                if(rests[results1[i]].get_drink_calories(results2[i])==input){
                    new_results1[new_resultsFound] = results1[i];
                    new_results2[new_resultsFound] = results2[i];
                    new_results3[new_resultsFound] = 'd';
                    new_resultsFound++;
                }
            }
        }
    }
    }

    if(new_resultsFound!=0){
        for(i=1;i<new_resultsFound;i++){
            results1[i]=new_results1[i];
            results2[i]=new_results2[i];
            results3[i]=new_results3[i];
        }
    }
    results1[0]=new_results1[0];
    results2[0]=new_results2[0];
    resultsFound = new_resultsFound;
}


// USER PROFILE FUNCTIONS

class myUser {
public:
    string fname;
    string lname;
    string prefstyle[5];
    string prefdrink[5];
    int favrest[5];

    void set_fname(string);
    void set_lname(string);
    void set_prefstyle(string,string styles[],int);
    void set_prefstyle(string styles[]);
    void set_prefdrink(string,string drinks[],int);
    void set_prefdrink(string drinks[]);
    void set_favrest(string,string rests[],int);
    void set_favrest(int rests[]);
    string get_fname(){
        return fname;
    }
    string get_lname(){
        return lname;
    }
    string* get_prefstyle(){
        return prefstyle;
    }
    string* get_prefdrink(){
        return prefdrink;
    }
    int* get_favrest(){
        return favrest;
    }

};

 void myUser::set_fname(string name){
    fname = name;
 }

 void myUser::set_lname(string name){
    lname = name;
 }

 void myUser::set_prefstyle(string namefile,string styles[],int num){
    int done,opt,cont,i;
    std::ofstream wfile;

    done=cont=0;

    wfile.open(namefile.c_str(),std::ios_base::app);

    // n = sizeof(*styles)/sizeof(styles[0]); DOESNT WORK

    while(!done && cont<5){
        cout << "Please choose your preferred style(s) of food\n";
        for(i=0;i<num;i++){
        cout << i+1 << " - " << styles[i] << endl;
        }
        cout << "0 - Quit\n";
        cin >> opt;
        if (opt>=0 && opt<=num){
            if(opt!=0){
                wfile << styles[opt-1] << "\n";
                prefstyle[cont]=styles[opt-1];
                cont++;
            } else {
                done=1;
            }
        } else {
            cout << "Please enter a valid option.\n";
        }
    }

    while (cont<5){
        wfile << "99\n";
        cont++;
    }

    wfile.close();
    cout << "Changes saved successfully!\n\n";

 }

  void myUser::set_prefstyle(string styles[]){
    int cont=0;

    while (cont<5){
        prefstyle[cont]=styles[cont];
        cont++;
    }
  }


  void myUser::set_prefdrink(string namefile,string drinks[],int num){
    int done,opt,cont,i;
    std::ofstream wfile;

    done=cont=0;

    wfile.open(namefile.c_str(),std::ios_base::app);

    while(!done && cont<5){
        cout << "Please choose your preferred style(s) of beverage\n";
        for(i=0;i<num;i++){
        cout << i+1 << " - " << drinks[i] << endl;
        }
        cout << "0 - Quit\n";
        cin >> opt;
        if (opt>=0 && opt<=num){
            if(opt!=0){
                wfile << drinks[opt-1] << "\n";
                prefdrink[cont]=drinks[opt-1];
                cont++;
            } else {
                done=1;
            }
        } else {
            cout << "Please enter a valid option.\n";
        }
    }

    while (cont<5){
        wfile << "99\n";
        cont++;
    }

    wfile.close();
    cout << "Changes saved successfully!\n\n";

 }

  void myUser::set_prefdrink(string drinks[]){
    int cont=0;

    while (cont<5){
        prefdrink[cont]=drinks[cont];
        cont++;
    }
  }

 void myUser::set_favrest(string namefile,string rests[],int num){
    int done,opt,cont,i;
    std::ofstream wfile;

    done=cont=0;

    wfile.open(namefile.c_str(),std::ios_base::app);

    while(!done && cont<5){
        cout << "Please choose your favorite restaurant(s)\n";
        for(i=0;i<num;i++){
        cout << i+1 << " - " << rests[i] << endl;
        }
        cout << "0 - Quit\n";
        cin >> opt;
        if (opt>=0 && opt<=num){
            if(opt!=0){
                wfile << opt-1 << "\n";
                favrest[cont]=opt-1;
                cont++;
            } else {
                done=1;
            }
        } else {
            cout << "Please enter a valid option.\n";
        }
    }

    while (cont<5){
        wfile << "99\n";
        cont++;
    }

    wfile.close();
    cout << "Changes saved successfully!\n\n";

 }

  void myUser::set_favrest(int rests[]){
    int cont=0;

    while (cont<5){
        favrest[cont]=rests[cont];
        cont++;
    }
  }

void createProfile(myUser &a,string styles[],string drinks[],string rests[],int num_dish_styles,int num_drink_styles,int num_rest){
    std::ofstream wfile;
    string holder;
    string fname;
    string lname;
    string namefile;

    cout << "\n------CREATE PROFILE-----\n\n";

    cout << "First name: ";
    std::getline(std::cin,holder,'\n');
    fname = holder;

    namefile = fname;
    a.set_fname(fname);

    namefile.append("_");

    cout << "Last name: ";
    std::getline(std::cin,holder,'\n');
    lname = holder;
    namefile.append(lname);
    a.set_lname(lname);

    std::replace(namefile.begin(),namefile.end(),' ','_');
    namefile.append(".txt");

    wfile.open(namefile.c_str(),std::ios_base::app);
    if (wfile.is_open()){
        wfile << fname << "\n";
        wfile << lname << "\n";
        wfile.close();
        a.set_prefstyle(namefile,styles,num_dish_styles);
        a.set_prefdrink(namefile,drinks,num_drink_styles);
        a.set_favrest(namefile,rests,num_rest);
        cout << "Profile successfully created!\n\n";
    } else {
        cout << "Error opening file.\n";
    }
}

void openProfile(myUser &a){
    string filename,line;
    string templist[5];
    int temp[5];
    int num;
    int cont;
    std::ifstream rfile;

    cout << "\n------OPEN PROFILE------\n\n";
    cout << "Please type your full name: ";
    std::getline(std::cin,filename,'\n');

    std::replace(filename.begin(),filename.end(),' ','_');

    filename = filename+".txt";

    rfile.open(filename.c_str());

    if (rfile.is_open()){
        getline(rfile,line);
        a.set_fname(line);
        getline(rfile,line);
        a.set_lname(line);
        cont=0;
        while (cont<5){
            getline(rfile,line);
            templist[cont]=line;
            cont++;
        }
        a.set_prefstyle(templist);
        cont=0;
        while (cont<5){
            getline(rfile,line);
            templist[cont]=line;
            cont++;
        }
        a.set_prefdrink(templist);
        cont=0;
        while (cont<5){
            getline(rfile,line);

            istringstream iss(line);
            iss >> num;
            temp[cont] = num;
            cont++;
        }
        a.set_favrest(temp);
        cout << "\n Profile accessed successfully!\n\n";
    } else {
        cout << "\nThis profile doesn't exist, please try again.\n\n";
    }
}

void load_database(restaurant restaurants[],int &num_rest){
    string key,str;
    string* ingredients;
    string ingred[20];
    ofstream myfile;
    ofstream restfile;
    bool done = false;
    int i=0;
    int restaurant_id=-1;
    char menu_item_id;
    char trash;
    int j=0;
    int z=0, q=0,l=0;
    int t=0;
    menu_item new_menu_item;
    drink drink_menu[NUM_RESTAURANTS][MENU_SIZE];
    main_dish main_dish_menu[NUM_RESTAURANTS][MENU_SIZE];
    side_dish side_dish_menu[NUM_RESTAURANTS][MENU_SIZE];
    class menu new_menu;
    ifstream rfile("menu_items.txt");
    ifstream rrestfile("restaurants.txt");

    num_rest = 0;

    while(getline(rrestfile,str)){
        int i;
        string rest_name,rest_name1,rest_name2;
        istringstream iss(str);
        iss >> i >> rest_name1 >>rest_name2;
        rest_name = rest_name1+" "+rest_name2;
        restaurants[i].set_name(rest_name);
        num_rest++;
    }

    while(getline(rfile,str)){
        if(str[0]=='&'){
            restaurants[restaurant_id].set_menu(main_dish_menu[restaurant_id], z, side_dish_menu[restaurant_id], q, drink_menu[restaurant_id], l);
            i=z=j=q=l=t=0;
        }
        if(str[0]=='@'){
            key = str;
            istringstream iss(key);
            iss >>trash>>restaurant_id>>menu_item_id;
        }
        if(str[0]!='#' and done ==false and str[0]!='@' and str[0]!='0' and str[0]!='1' and str[0]!='&'){
            ingred[i]=str;
            i++;
        }
        if(str[0]=='#'){
            done = true;
        }
        if(done==true and str[0]!='#'){
            if(j==0){
                new_menu_item.set_name(str);
            }
            if(j==1){
                new_menu_item.set_style(str);
            }
            if(j==2){
                istringstream iss(str);
                float price;
                iss >> price;
                new_menu_item.set_price(price);
            }
            if(j==3){
                istringstream iss(str);
                int how_many;
                iss >> how_many;
                new_menu_item.set_for_how_many(how_many);
            }
            if(j==4){
                istringstream iss(str);
                int calories;
                iss >> calories;
                new_menu_item.set_calories(calories);
            }
            j++;
        }
        if (j==5 and (menu_item_id =='m' or menu_item_id == 's')){
            ingredients = new string[i];
            int p=0;
            while (p<i){
                ingredients[p]=ingred[p];
                p++;
            }
            new_menu_item.set_ingredients(ingredients,i);
            if (menu_item_id=='m'){
                main_dish_menu[restaurant_id][z] = new_menu_item;
                main_dish_menu[restaurant_id][l].set_restaurant(restaurants[restaurant_id].get_name());
                z++;
            }
            if (menu_item_id == 's'){
                side_dish_menu[restaurant_id][q] = new_menu_item;
                side_dish_menu[restaurant_id][l].set_restaurant(restaurants[restaurant_id].get_name());
                q++;
            }
            done = false;
            j=0;
            i=0;
        }
        if (j==5 and menu_item_id == 'd' and t==0){
            ingredients = new string[i];
            int p=0;
            while (p<i){
                ingredients[p]=ingred[p];
                p++;
            }
            new_menu_item.set_ingredients(ingredients,i);
            drink_menu[restaurant_id][l] = new_menu_item;
            istringstream iss(str);
            bool temperature;
            iss >> temperature;
            drink_menu[restaurant_id][l].set_temperature(temperature);
            getline(rfile,str);
            istringstream is(str);
            bool alcoholic;
            is >> alcoholic;
            drink_menu[restaurant_id][l].set_alcohol(alcoholic);
            drink_menu[restaurant_id][l].set_restaurant(restaurants[restaurant_id].get_name());
            j++;
            l++;
            j=0;
            i=0;
            done = false;
        }
    }

    rfile.close();
    rrestfile.close();
}

void get_lists(string restaurants[],string dish_styles[],string drink_styles[],int &num_dish_styles, int &num_drink_styles,restaurant rests[],int num_rest){
    int num_dishes;
    int num_sides;
    int num_drinks;
    int i;
    bool repeat;

    num_dish_styles = 0;
    num_drink_styles = 0;

    ifstream rfile;
    string str;

    rfile.open("sort_style.txt");
    while(getline(rfile,str)){
        int newID,restID,oldID;
        char type;
        string style;

        repeat = false;

        istringstream iss(str);
        iss >> newID >> type >> restID >> oldID >> style;
        if(type == 'm' || type == 's'){
            if(num_dish_styles == 0){
                dish_styles[num_dish_styles] = style;
                num_dish_styles++;
            } else {
                for(i=0;i<num_dish_styles;i++){
                    if(dish_styles[i]==style){
                        repeat = true;
                    }
                }
                if(!repeat){
                    dish_styles[num_dish_styles] = style;
                    num_dish_styles++;
                }
            }
        } else if (type == 'd'){
            if(num_drink_styles == 0){
                drink_styles[num_drink_styles] = style;
                num_drink_styles++;
            } else {
                for(i=0;i<num_drink_styles;i++){
                    if(drink_styles[i]==style){
                        repeat = true;
                    }
                    if(!repeat){
                        drink_styles[num_drink_styles] = style;
                        num_drink_styles++;
                    }
                }
            }
        }
    }

    rfile.close();

    for(i=0;i<num_rest;i++){
        restaurants[i]=rests[i].get_name();
    }
}

int user_interface(myUser user,restaurant rests[],int num_rest){ // We will probably need sizes for these lists
    int total_numbers[4] = {0,0,0,0};
    int i;
    for(i=0;i<num_rest;i++){
        total_numbers[0] += rests[i].get_num_dishes();
        total_numbers[1] += rests[i].get_num_side_dishes();
        total_numbers[2] += rests[i].get_num_drinks();
    }

    //cout << " Total number 1: " << total_numbers[0] << endl;
     //   cout << " Total number 2: " << total_numbers[1] << endl;
    //cout << " Total number 2: " << total_numbers[2] << endl;


    sorted_names n_main[total_numbers[0]];
    sorted_names n_side[total_numbers[1]];
    sorted_names n_drink[total_numbers[2]];

    sorted_names s_main[total_numbers[0]];
    sorted_names s_side[total_numbers[1]];
    sorted_names s_drink[total_numbers[2]];

    sorted_prices p_main[total_numbers[0]];
    sorted_prices p_side[total_numbers[1]];
    sorted_prices p_drink[total_numbers[2]];

    sorted_prices c_main[total_numbers[0]];
    sorted_prices c_side[total_numbers[1]];
    sorted_prices c_drink[total_numbers[2]];

    ingredient sorted[NUM_INGREDIENTS];

    int results1[NUM_RESULTS];
    int results2[NUM_RESULTS];
    char results3[NUM_RESULTS];
    int resultsFound;

    string input; //user input
    int index,index2,opt;
    bool valid;
    bool done;
    bool mainMENU;
    bool exitMENU;
    int found = 0;
    float price;
    int num;
    int counter;
    bool foundindex;
    int posindex;
    int temprest;
    string tempdish;
    string tempdrink;
    int randIndex1,randIndex2;
    bool noResults;

    get_sorted_name(n_main,n_side,n_drink,"sort_name.txt");
    get_sorted_name(s_main,s_side,s_drink,"sort_style.txt");
    get_sorted_price(p_main,p_side,p_drink,"sort_price.txt");
    get_sorted_price(c_main,c_side,c_drink,"sort_calories.txt");
    get_sorted_ingredient(sorted,total_numbers[3],"sort_ingredients.txt");

    cout << " \n---- Welcome " << user.get_fname() << " " << user.get_lname() << "! ----\n\n";

    exitMENU = false;

    while(!exitMENU){
    cout << "--------MAIN MENU--------\n";
    cout << " Please select one of the options below: \n\n";
    cout << " 1 - Display restaurant menu\n";
    cout << " 2 - Make a search\n";
    cout << " 3 - See recommendations\n"; // We need lists for styles
    cout << " 0 - Quit\n\n";
    opt = get_option(input);

    mainMENU = false;

    switch(opt){
        case 0:
            exitMENU = true;
            break;
        case 1:
            cout << "\n Select a restaurant from the list: \n\n";
            for (i=1;i<=num_rest;i++){ // num_rest in the number of restaurants read from the file
                cout << " " << i << " - " << rests[i-1].get_name() <<endl;
            }
            index = get_option(input)-1;
            if(index>=-1 & index<num_rest){
                if(index==-1){
                    return 1;
                }
                cout << " Select a category to display: \n";
                cout << " 1 - Main dishes\n";
                cout << " 2 - Side dishes\n";
                cout << " 3 - Drinks\n";
                opt = get_option(input);

                switch(opt){
                    case 1:
                        rests[index].print_main_dishes();//rests[index].print_main_dishes();
                        break;
                    case 2:
                        rests[index].print_side_dishes();
                        break;
                    case 3:
                        rests[index].print_drinks();
                }
            }
            break;
        case 2:
            while(!mainMENU){
            cout << " Make a search for all the restaurants or just for one?\n";
            cout << " 1 - Just for one restaurant\n";
            cout << " 2 - For all the restaurants\n";
            cout << " 0 - Go back to main menu\n\n";
            opt = get_option(input);

            switch(opt){
                case 0:
                    mainMENU = true;
                case 1:
                    while(!mainMENU){
                    cout << "\n Select a restaurant from the list: \n\n";
                    for (i=1;i<=num_rest;i++){ // num_rest in the number of restaurants read from the file
                        cout << " " << i << " - " << rests[i-1].get_name() <<endl;
                    }
                    cout << endl;

                    index = get_option(input)-1;
                    cout << "\n\n-------------------------\n";
                    cout << "-------SEARCH MENU-------\n";
                    cout << " Select the parameter for searching: \n\n";
                    cout << " 1 - Search by name\n";
                    cout << " 2 - Search by price\n";
                    cout << " 3 - Search by style\n";
                    cout << " 4 - Search by number of calories\n";
                    cout << " 5 - Search by ingredient\n";
                    cout << " 0 - Go back to main menu\n\n";
                    opt = get_option(input);

                    switch(opt){
                        case 0:
                            mainMENU = true;
                            break;
                        case 1:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            cin.clear();
                            cin.sync();

                            switch(opt){
                            case 1:
                                cout << " Please type the name of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_main,total_numbers[0],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }


                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_main_dish(results2[posindex]);
                                        cout << endl;
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This main dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){

                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                           case 2:
                                cout << " Please type the name of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_side,total_numbers[1],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_side_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This side dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the name of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_drink,total_numbers[2],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_drink(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This drink is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 2:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            cin.clear();
                            cin.sync();

                            switch(opt){
                            case 1:
                                cout << " Please type the price of the main dish you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(p_main,total_numbers[0],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_main_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This main dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                           case 2:
                                cout << " Please type the price of the side dish you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(p_side,total_numbers[1],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_side_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This side dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the price of the drink you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(p_drink,total_numbers[2],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_drink(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This drink is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 3:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            cin.clear();
                            cin.sync();

                            switch(opt){
                            case 1:
                                cout << " Please type the style of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_main,total_numbers[0],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    foundindex = false;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_main_dish(results2[posindex]);
                                        cout << endl;
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This main dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the style of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_side,total_numbers[1],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    bool foundindex = false;
                                    int posindex;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_side_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This side dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the style of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_drink,total_numbers[2],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    bool foundindex = false;
                                    int posindex;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_drink(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This drink is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 4:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            cin.clear();
                            cin.sync();

                            switch(opt){
                            case 1:
                                cout << " Please type the number of calories of the main dish you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_main,total_numbers[0],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    bool foundindex = false;
                                    int posindex;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_main_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This main dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                           case 2:
                                cout << " Please type the number of calories of the side dish you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_side,total_numbers[1],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    bool foundindex = false;
                                    int posindex;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_side_dish(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This side dish is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the number of calories of the drink you're searching for: ";
                                cin >> price;

                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_drink,total_numbers[2],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    bool foundindex = false;
                                    int posindex;
                                    for(i=0;i<resultsFound;i++){
                                        if(results1[i]==index){
                                            foundindex=true;
                                            posindex = i;
                                        }
                                    }
                                    if(foundindex){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[posindex]].get_name()<<"\n";
                                        rests[results1[posindex]].print_drink(results2[posindex]);
                                    } else {
                                        cout << " Not available in the selected restaurant.\n This drink is available at: \n";
                                        for(i=0;i<resultsFound;i++){
                                            cout << " - " << rests[results1[i]].get_name()<<"\n";
                                        }
                                        cout << "-------------------------\n";
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 5:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            cin.clear();
                            cin.sync();

                            switch(opt){
                            case 1:
                                cout << " Please type the ingredient of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }
                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    int counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 'm' && results1[i] == index){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_main_dish(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the ingredient of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    int counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 's' && results1[i] == index){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_side_dish(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the ingredient of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    int counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 'd' && results1[i] == index){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_drink(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    while(!mainMENU){
                    cout << " Select the parameter for searching: \n\n";
                    cout << " 1 - Search by name\n";
                    cout << " 2 - Search by price\n";
                    cout << " 3 - Search by style\n";
                    cout << " 4 - Search by number of calories\n";
                    cout << " 5 - Search by ingredient\n";
                    cout << " 0 - Go back to main menu\n\n";
                    opt = get_option(input);

                    switch(opt){
                        case 0:
                            mainMENU = true;
                            break;
                        case 1:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            switch(opt){
                            case 1:
                                cout << " Please type the name of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_main,total_numbers[0],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";

                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << "\n There are no compatible items to your search.\n\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_main_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the name of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_side,total_numbers[1],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";

                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_side_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the name of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(n_drink,total_numbers[2],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by price\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==2){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";

                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_drink(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 2:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            switch(opt){
                            case 1:
                                cout << " Please type the price of the main dish you're searching for: ";
                                cin >> price;
                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(p_main,total_numbers[0],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_main_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the price of the side dish you're searching for: ";
                                cin >> price;

                                resultsFound = 0;
                                floatbinarySearch_price(p_side,total_numbers[1],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_side_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the price of the drink you're searching for: ";
                                cin >> price;

                                resultsFound = 0;
                                floatbinarySearch_price(p_drink,total_numbers[2],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by style\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_drink(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 3:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            switch(opt){
                            case 1:
                                cout << " Please type the style of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_main,total_numbers[0],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }


                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";

                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_main_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the style of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_side,total_numbers[1],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }


                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_side_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the style of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_name(s_drink,total_numbers[2],input,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by number of calories\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                        cin.clear();
                                        cin.sync();
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }


                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_drink(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 4:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            switch(opt){
                            case 1:
                                cout << " Please type the number of calories of the main dish you're searching for: ";
                                cin >> price;
                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_main,total_numbers[0],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='m';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_main_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the number of calories of the side dish you're searching for: ";
                                cin >> price;
                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_side,total_numbers[1],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='s';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_side_dish(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the number of calories of the drink you're searching for: ";
                                cin >> price;
                                cin.clear();
                                cin.sync();

                                resultsFound = 0;
                                floatbinarySearch_price(c_drink,total_numbers[2],price,results1,results2,resultsFound);
                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        results3[i]='d';
                                    }
                                }

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by ingredient\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the ingredient of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(3,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if (results1[0] == -1  && results2[0] == -1){
                                    cout << " There are no compatible items to your search.\n";
                                } else {
                                    for(i=0;i<resultsFound;i++){
                                        cout << "\n-------------------------\n";
                                        cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                        rests[results1[i]].print_drink(results2[i]);
                                        cout << endl;
                                    }
                                }
                                break;
                            }
                            break;
                        case 5:
                            cout << " Select a category to search: \n";
                            cout << " 1 - Main dishes\n";
                            cout << " 2 - Side dishes\n";
                            cout << " 3 - Drinks\n";
                            opt = get_option(input);

                            switch(opt){
                            case 1:
                                cout << " Please type the ingredient of the main dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the main dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the main dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the main dish you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 'm'){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_main_dish(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            case 2:
                                cout << " Please type the ingredient of the side dish you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the side dish you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the side dish you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the side dish you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    int counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 's'){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_side_dish(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            case 3:
                                cout << " Please type the ingredient of the drink you're searching for: ";
                                std::getline(std::cin,input,'\n');

                                resultsFound = 0;
                                strbinarySearch_ingredient(sorted,total_numbers[3],input,results1,results2,results3,resultsFound);

                                done = false;
                                while(!done){
                                    cout << " \nDo you want to search more parameters?\n";
                                    cout << " If yes, select: \n";
                                    cout << " 1 - Search by name\n";
                                    cout << " 2 - Search by price\n";
                                    cout << " 3 - Search by style\n";
                                    cout << " 4 - Search by number of calories\n\n";
                                    cout << " If no, press 0 (zero) to see the search results\n\n";
                                    opt = get_option(input);

                                    cin.clear();
                                    cin.sync();

                                    if(opt==1){
                                        cout << " Please type the name of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(1,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==2){
                                        cout << " Please type the price of the drink you're searching for: ";
                                        cin >> price;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_float(price,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==3){
                                        cout << " Please type the style of the drink you're searching for: ";
                                        std::getline(std::cin,input,'\n');
                                        linearSearch_string(2,input,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==4){
                                        cout << " Please type the number of calories of the drink you're searching for: ";
                                        cin >> num;
                                        cin.clear();
                                        cin.sync();
                                        linearSearch_int(num,results1,results2,results3,resultsFound,rests);
                                    } else if(opt==0){
                                        done = true;
                                    }
                                }

                                cout << "-------------------------\n";
                                cout << "-----Search results:-----\n";
                                cout << "-------------------------\n";
                                if(results1[0]==-1 && results2[0]==-1){
                                    cout << "There are no compatible items to your search.\n";
                                } else {
                                    int counter = 0;
                                    for(i=0;i<resultsFound;i++){
                                        if(results3[i] == 'd'){
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_drink(results2[i]);
                                            cout << endl;
                                            counter++;
                                        }
                                    }
                                    if(counter == 0){
                                        cout << "There are no compatible items to your search.\n";
                                    }
                                }
                                break;
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            break;
        case 3:
            while(!mainMENU){
                cout << " What do you want a recommendation for?: \n\n";
                cout << " 1 - Main dishes\n";
                cout << " 2 - Side dishes\n";
                cout << " 3 - Drinks\n";
                cout << " 0 - Go back to main menu\n\n";
                opt = get_option(input);

                switch(opt){
                    case 0:
                        mainMENU = true;
                        break;
                    case 1:
                        index = 0;
                        index2 = 0;
                        done=false;
                        while(index2<5){
                            while(!done && index<5){

                                resultsFound = 0;
                                strbinarySearch_name(s_main,total_numbers[0],user.prefstyle[index],results1,results2,resultsFound);

                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        if(user.favrest[index2]==results1[i]){
                                            done = true;
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_main_dish(results2[i]);
                                            cout << endl;
                                        }
                                    }
                                }

                                index++;
                            }
                            index2++;
                        }
                        if(!done){
                            cout << "\n\n Sorry, no recommendations found. Try changing your preferences \n\n";
                        }
                        break;
                    case 2:
                        index = 0;
                        index2 = 0;
                        done=false;
                        while(index2<5){
                            while(!done && index<5){

                                resultsFound = 0;
                                strbinarySearch_name(s_side,total_numbers[1],user.prefstyle[index],results1,results2,resultsFound);

                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        if(user.favrest[index2]==results1[i]){
                                            done = true;
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_side_dish(results2[i]);
                                            cout << endl;
                                        }
                                    }
                                }

                                index++;
                            }
                            index2++;
                        }
                        if(!done){
                            cout << "\n\n Sorry, no recommendations found. Try changing your preferences \n\n";
                        }
                        break;
                    case 3:
                        index = 0;
                        index2 = 0;
                        done=false;
                        cout << " STYLE " << user.prefstyle[index]<<endl;
                        cout << " RESTAURANT " << user.favrest[index2] << endl;
                        while(index2<5){
                            while(!done && index<5){

                                resultsFound = 0;
                                strbinarySearch_name(s_drink,total_numbers[2],user.prefdrink[index],results1,results2,resultsFound);

                                if(resultsFound!=0){
                                    for(i=0;i<resultsFound;i++){
                                        if(user.favrest[index2]==results1[i]){
                                            done = true;
                                            cout << "\n-------------------------\n";
                                            cout << " Available at - "<< rests[results1[i]].get_name()<<"\n";
                                            rests[results1[i]].print_drink(results2[i]);
                                            cout << endl;
                                        }
                                    }
                                }

                                index++;
                            }
                            index2++;
                        }
                        if(!done){
                            cout << "\n\n Sorry, no recommendations found. Try changing your preferences \n\n";
                        }
                        break;







                }

            }



    }
    }
}


int main() {
    restaurant restaurants[NUM_RESTAURANTS];
    string dish_styles[MENU_SIZE];
    string drink_styles[MENU_SIZE];
    string name_restaurants[MENU_SIZE];
    int num_dish_styles;
    int num_drink_styles;
    int num_rest;
    int opt1;
    myUser user;

    load_database(restaurants,num_rest);

    get_lists(name_restaurants,dish_styles,drink_styles,num_dish_styles,num_drink_styles,restaurants,num_rest);

    cout << "--------PROFILE ACCESS--------\n";
    cout << "Do you already have a profile?\n 1 - Yes\n 2 - No\n\nType the desired option:";
    cin >> opt1;
    std::cin.ignore(256,'\n');

    cin.clear();
    cin.sync();

    switch(opt1){
    case 1:
        openProfile(user);
        break;
    case 2:
        createProfile(user,dish_styles,drink_styles,name_restaurants,num_dish_styles,num_drink_styles,num_rest);
        break;
    }

    user_interface(user,restaurants,num_rest);

    return 42;

}
//How to Access Data: The menus are stored in restaurants[i], where i is the index found in the index file.
//The individual items can be accessed via drink_menu[i][j]/side_dish_menu[i][j]/main_dish_menu[i][j] where i is the indexed restaurant and j is the order of the item.


//What functions do we need:
//Data access, Data manipulation,
